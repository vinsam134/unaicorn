# -*- coding: utf-8 -*-
"""training_model_titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18YuSAN23IKPCgqVuPGdSpEBvjs-pdsUc
"""

from sklearn.model_selection import train_test_split
import pickle
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
df = pd.read_csv("train.csv")


#KEY STEPS 
#0.Basic checks 
'''
df.info
df.columns 
df.shape 
df.head 

'''

#1.Outlier treatment
##Correcting - outlier treatment using histogram 
'''
import seaborn as sns
graph = sns.FacetGrid(df, col="Survived")
graph.map(plt.hist, "Fare", bins=20)
'''

#2.Missing value treatment
##Completeting - identifying nulls - either replacing or removing the unneccessory columns 
'''
for column in df:
  print(column, ": ", df[column].isnull().sum())
'''
##Execution
df['Age'].fillna(df['Age'].median(), inplace=True)
df['Fare'].fillna(df['Fare'].median(), inplace=True)
df['Embarked'].fillna("S", inplace=True)



#3.Creating new feature

def get_title(name):
    if '.' in name:
        return name.split(',')[1].split('.')[0].strip()
    else:
        return 'Unknown'

# A list with the all the different titles
titles = sorted(set([x for x in df.Name.map(lambda x: get_title(x))]))


# Normalize the titles
def replace_titles(x):
    title = x['Title']
    if title in ['Capt', 'Col', 'Major']:
        return 'Officer'
    elif title in ["Jonkheer","Don",'the Countess', 'Dona', 'Lady',"Sir"]:
        return 'Royalty'
    elif title in ['the Countess', 'Mme', 'Lady']:
        return 'Mrs'
    elif title in ['Mlle', 'Ms']:
        return 'Miss'
    else:
        return title

# Lets create a new column for the titles
df['Title'] = df['Name'].map(lambda x: get_title(x))
# train.Title.value_counts()
# train.Title.value_counts().plot(kind='bar')

# And replace the titles, so the are normalized to 'Mr', 'Miss' and 'Mrs'
df['Title'] = df.apply(replace_titles, axis=1)


#4.Turning cateogorical to numerical form 
df.Sex.replace(('male','female'), (0,1), inplace = True)
df.Embarked.replace(('S','C','Q'), (0,1,2), inplace = True)
df.Title.replace(('Mr','Miss','Mrs','Master','Dr','Rev','Officer','Royalty'), (0,1,2,3,4,5,6,7), inplace = True)

#5.Dropping columns beyond treatment
df.drop("Cabin", axis=1, inplace=True)
df.drop("Ticket", axis=1, inplace=True)
df.drop("Name", axis=1, inplace=True)

#6.Creating train and test dataframes - tip - val stands for test datafram 
predictors = df.drop(['Survived', 'PassengerId'], axis=1)
target = df["Survived"]
x_train, x_val, y_train, y_val = train_test_split(predictors, target, test_size = 0.22, random_state = 0)

#7.Making model 
myfirst_randomforest = RandomForestClassifier()
myfirst_randomforest.fit(x_train, y_train)
y_pred = myfirst_randomforest.predict(x_val)

#8.Checking accuracy 
from sklearn.metrics import accuracy_score
randomforest_acc = accuracy_score(y_val,y_pred)
print("Accuracy is {}" .format(randomforest_acc))

#9.Saving model 
filename = 'titanic_model.sav'
pickle.dump(myfirst_randomforest, open(filename, 'wb'))









df_test.head()





